// Generated by CoffeeScript 1.4.0
(function() {
  var ComfoAir, myparser, serialport,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  serialport = require('serialport');

  myparser = require('parser');

  ComfoAir = (function(_super) {

    __extends(ComfoAir, _super);

    ComfoAir.prototype.fromHexStr = function(str) {
      var i, tmp, _i, _len, _results, _step;
      _results = [];
      for (i = _i = 0, _len = str.length, _step = 2; _i < _len; i = _i += _step) {
        tmp = str[i];
        _results.push(parseInt(str.slice(i, i + 2), 16));
      }
      return _results;
    };

    ComfoAir.prototype.max = function(n1, n2) {
      var _ref;
      n1 = parseInt(n1, 10);
      n2 = parseInt(n2, 10);
      return (_ref = n1 > n2) != null ? _ref : {
        n1: n2
      };
    };

    ComfoAir.prototype.addFillerLeft = function(number, filler, length) {
      var fillerArray, str;
      str = '' + number;
      fillerArray = new Array(this.max(length - str.length, 0) + 1);
      return fillerArray.join(filler) + str;
    };

    ComfoAir.prototype.toHexStr = function(bytearray) {
      var i, result, tmp;
      result = (function() {
        var _i, _len, _results;
        _results = [];
        for (i = _i = 0, _len = bytearray.length; _i < _len; i = ++_i) {
          tmp = bytearray[i];
          _results.push(this.addFillerLeft(bytearray[i].toString(16).toUpperCase(), '0', 2));
        }
        return _results;
      }).call(this);
      return result.join('');
    };

    function ComfoAir(device, baudrate) {
      if (baudrate == null) {
        baudrate = 9600;
      }
      this.info = {};
      ComfoAir.__super__.constructor.call(this, device, {
        baudrate: baudrate,
        parser: myparser.readline('\n')
      });
      this.on('open', function() {
        console.log('open');
        return this.on('data', function(data) {
          return this.emit('temp', data);
        });
      });
    }

    return ComfoAir;

  })(serialport.SerialPort);

  module.exports = ComfoAir;

}).call(this);
